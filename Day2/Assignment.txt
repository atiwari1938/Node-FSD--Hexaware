~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What is View in MySql?
In MySQL, a view is a virtual table that is created based on the result set of a SELECT query. It does not store any data on its own but rather it represents data from one or more underlying tables or views. Views can be used to simplify complex queries, provide a layer of abstraction over the database schema, and offer security by controlling access to certain columns or rows of data.

Why we use Views ?
1-Simplify Queries: Views condense complex SQL queries into a single virtual table, enhancing query simplicity and maintenance.
2-Abstraction: They offer a layer of abstraction over the database schema, shielding users and applications from intricate database structures. This is valuable when modifying the schema without affecting views.
3-Security: Views enable access control by limiting data visibility to specific columns or rows. This enhances security by restricting user access based on defined criteria.
4-Performance: Views can optimize performance by pre-computing complex query results and storing them as virtual tables. This minimizes the execution overhead of repetitive queries.
5-Code Reusability: By defining frequently used queries once, views facilitate their reuse across various parts of the database or application code, thereby promoting code reusability and maintainability.

How to create views in MySql?

SYNTAX:
	CREATE VIEW view_name AS
	SELECT column1, column2, ...
	FROM table_name
	WHERE condition;

Example:

CREATE VIEW TotalAvailableProducts AS
SELECT * FROM Products
WHERE QuantityInStock>10;

SELECT * FROM TotalAvailableProducts;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*Create a stored procedures that will display the employee details based on the given dept name.  Dept name is the input for stored procedure.*/

DELIMITER //
CREATE PROCEDURE GetEmployeeByDeptName(IN deptName VARCHAR(225))
BEGIN
	SELECT emps.* FROM emps
    INNER JOIN dept ON emps.deptno = dept.deptno
    WHERE dept.dname =deptName;
END //
DELIMITER ;

CALL GetEmployeeByDeptName('QA Tester');
SET @dname='QA Tester';
CALL GetEmployeeByDeptName(@dname);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* Create stored procedures that get employees count who are having greater salary than the average of all salaries.  Return employees count  as output variable.*/

DELIMITER //
CREATE PROCEDURE GetEmpCountAboveAvgSal(OUT empCount INT)
BEGIN
	DECLARE avgsal INT;
    SELECT avg(salary) INTO avgsal FROM emps;
    SELECT COUNT(*) INTO empCount FROM emps WHERE salary> avgsal;
END //
DELIMITER ;

SET @empCount=0;
CALL GetEmpCountAboveAvgSal(@empCount);
Select @empCount as EmployeeCountAboveAvgSalary;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*Create stored procedures that insert the data into emp table. Take all the required values as input parameters. */

DELIMITER ??
CREATE PROCEDURE InsertEmp(IN empno INT,IN ename VARCHAR(255),IN job VARCHAR(255),IN salary INT,IN deptno INT)
BEGIN
	INSERT INTO emps(empno,ename,job,salary,deptno)
    VALUES(empno,ename,job,salary,deptno);
END ??
DELIMITER ;

CALL InsertEmp(1021,'Ankit Tiwari','Software Developer',60000,10);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*Create View to return employee job and corresponding  max salary in each job.*/

CREATE VIEW MaxSalByJob AS
SELECT job,MAX(salary) AS max_salary
FROM emps GROUP BY job;

SELECT * FROM MaxSalByJob;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*How to use distinct option in select query */
/* In MySql, we use the 'DISTINCT' keyword in a 'SELECT' query to remove duplicate rows from the result set.
SYNTAX:  SELECT DISTINCT column1,column2,..A
		 FROM table_name; */
-- Example :SELECT distinct jobs from the table
SELECT DISTINCT job FROM emps;
