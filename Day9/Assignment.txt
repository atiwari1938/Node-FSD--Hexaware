What are the environment variables? //.env file is used to store and manage environment variables
Environment variables are predetermined values that are typically used to provide the ability to configure a value in your code from outside of your application. Environment variables are variables that are part of the environment in which a process runs. They are key-value pairs that are set outside of the application code and are accessible to the application during runtime. Environment variables can vary depending on the operating system and are used to customize the behaviour of applications without modifying the source code.
Why do we use in Node JS?
using environment variables in your Node.js applications is crucial for maintaining security and configurability. By keeping sensitive information outside your codebase and using a standardized approach, you can easily manage different deployment environments and ensure a more secure application.
•	Configuration Management: Store configuration settings like database connection strings and API keys. 
•	Security: Safely store sensitive information such as passwords and secret keys. 
•	Portability: Adapt applications to different environments without code changes.
•	Flexibility: Customize application behaviour based on the runtime environment.
•	Dependency Injection: Provide shared configuration settings to application components. 
•	Containerization and Orchestration: Configure containers and provide runtime information in containerized environments like Docker and Kubernetes.

How to create and access environment variables?
To create environment variables 
Step 1: Create environment variables in the terminal or command prompt before running node.js application
set VARIABLE_NAME=value
Step 2:Acceses the created environment variable in Node.js using process.env object
// Accessing an environment variable
const variableValue = process.env.VARIABLE_NAME;

// Using the environment variable
console.log(variableValue);

What is the folder structure(diff. folders that we create) of Node JS application?
The folder structure of a Node.js application can vary depending on the specific requirements of the project and personal preferences. However, a typical folder structure for a Node.js application might include the following directories:

•	src: This directory contains the source code of the application. It often includes subdirectories for different modules, components, or features of the application.

•	public: This directory contains static assets such as HTML files, client-side JavaScript, CSS, images, fonts, etc. These assets are served directly to clients by the web server.

•	views: This directory contains view templates used by templating engines like Pug, EJS, Handlebars, etc. These templates are used to generate dynamic HTML content on the server-side.

•	routes: This directory contains route handlers for different HTTP requests. Each route handler defines the behavior of the server when a specific URL is requested.

•	models: This directory contains database models or data access layer code if the application interacts with a database. Each model represents a specific data entity and defines operations for interacting with the database.

•	controllers: This directory contains controller functions that handle business logic and orchestrate interactions between models and views. Controller functions are responsible for processing requests, retrieving data from models, and sending responses back to clients.

•	middlewares: This directory contains custom middleware functions that are used to modify request or response objects, execute additional logic before or after route handlers, or perform authentication and authorization checks.

•	config: This directory contains configuration files for different environments (development, production, testing), database configurations, logging configurations, etc.

•	tests: This directory contains test scripts or test suites written using testing frameworks like Mocha, Jest, or Jasmine. These tests ensure that the application behaves correctly and maintains expected functionality over time.

•	scripts: This directory contains utility scripts or build scripts used for tasks such as database migrations, seeding initial data, deployment scripts, etc.

•	logs: This directory contains log files generated by the application during runtime. These logs capture information, warnings, errors, and other diagnostic messages that can be useful for troubleshooting and debugging.

•	node_modules: This directory contains third-party dependencies installed via npm (Node Package Manager). It's typically not version-controlled and is managed by npm.

•	.git: This directory contains Git-related files and metadata if the project is version-controlled using Git.

•	.env: This file contains environment variables used to configure the application. It's often used to store sensitive information like API keys, database credentials, etc., without exposing them in version control.

•	package.json: This file contains metadata about the project and configuration for npm. It includes project dependencies, scripts, version information, etc.

•	README.md: This file contains documentation about the project, including installation instructions, usage examples, project structure, and other relevant information.

What is ORM? Find some examples of ORM libraries and tools?

ORM stands for Object-Relational Mapping. It's a programming technique used to convert data between incompatible type systems – in particular, between object-oriented programming languages and relational databases.

In simpler terms, ORM allows developers to work with relational databases using object-oriented programming concepts, such as classes, objects, and methods. It abstracts away the details of database interactions and allows developers to manipulate database records using familiar syntax and semantics.

Here are some examples of popular ORM libraries and tools:

•	Sequelize: Sequelize is an ORM for Node.js that supports various databases like MySQL, PostgreSQL, SQLite, and MSSQL. It provides a powerful API for defining models, performing CRUD operations, and executing complex queries.

•	TypeORM: TypeORM is an ORM for TypeScript and JavaScript that works with databases like MySQL, PostgreSQL, MariaDB, SQLite, and MongoDB. It's highly customizable and supports features like data validation, eager and lazy loading, and migrations.

•	Hibernate: Hibernate is a Java-based ORM framework for mapping Java classes to database tables. It's widely used in Java EE applications and supports features like caching, lazy loading, and criteria queries.
